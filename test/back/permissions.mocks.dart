// Mocks generated by Mockito 5.3.2 from annotations
// in field_drawer/back/permissions.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:field_drawer/back/permissions.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePermission_0 extends _i1.SmartFake implements _i2.Permission {
  _FakePermission_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PermissionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsService extends _i1.Mock
    implements _i3.PermissionsService {
  @override
  _i2.Permission get permission => (super.noSuchMethod(
        Invocation.getter(#permission),
        returnValue: _FakePermission_0(
          this,
          Invocation.getter(#permission),
        ),
        returnValueForMissingStub: _FakePermission_0(
          this,
          Invocation.getter(#permission),
        ),
      ) as _i2.Permission);
  @override
  set permission(_i2.Permission? _permission) => super.noSuchMethod(
        Invocation.setter(
          #permission,
          _permission,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<Map<_i2.Permission, _i2.PermissionStatus>> permissionServices() =>
      (super.noSuchMethod(
        Invocation.method(
          #permissionServices,
          [],
        ),
        returnValue:
            _i4.Future<Map<_i2.Permission, _i2.PermissionStatus>>.value(
                <_i2.Permission, _i2.PermissionStatus>{}),
        returnValueForMissingStub:
            _i4.Future<Map<_i2.Permission, _i2.PermissionStatus>>.value(
                <_i2.Permission, _i2.PermissionStatus>{}),
      ) as _i4.Future<Map<_i2.Permission, _i2.PermissionStatus>>);
  @override
  _i4.Future<bool> getNetworkStatus() => (super.noSuchMethod(
        Invocation.method(
          #getNetworkStatus,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
